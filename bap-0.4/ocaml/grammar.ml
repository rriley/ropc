type token =
  | ID of (string)
  | INT of (Big_int.big_int)
  | STRING of (string)
  | COMMENT of (string)
  | LPAREN
  | RPAREN
  | LSQUARE
  | RSQUARE
  | COMMA
  | SEMI
  | EOF
  | COLON
  | CJMP
  | JMP
  | LABEL
  | ADDR
  | ASSERT
  | HALT
  | SPECIAL
  | LET
  | IN
  | UNKNOWN
  | WITH
  | TRUE
  | FALSE
  | EBIG
  | ELITTLE
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | DIVIDE
  | MOD
  | SMOD
  | TIMES
  | SDIVIDE
  | LSHIFT
  | RSHIFT
  | ARSHIFT
  | XOR
  | NEQ
  | SLT
  | SLE
  | AND
  | OR
  | CONCAT
  | EXTRACT
  | EQUAL
  | EQUALEQUAL
  | LT
  | LE
  | NOT
  | ASSIGN
  | GT
  | GE
  | SGT
  | SGE
  | AT
  | QUESTION
  | LCURLY
  | RCURLY

open Parsing;;
let _ = parse_error;;
# 2 "grammar.mly"
(* IR Grammer file *)
(* Author: David Brumley, Ivan Jager *)
(* $Id: grammar.mly 5229 2011-09-21 20:27:21Z edmcman $ *)

open Ast
open Big_int
open Grammar_scope
open Type

let parse_error str =
  let {Lexing.pos_fname=f; pos_lnum=sl; pos_bol=sb; pos_cnum=sc} =
    Parsing.symbol_start_pos()
  and {Lexing.pos_lnum=el; pos_bol=eb; pos_cnum=ec } = Parsing.symbol_end_pos() in
  Printf.eprintf "%s:%i:%i-%i:%i: %s\n" f sl (sc-sb) el (ec-eb) str

let mk_attr lab string =
  match lab with
  | "asm" -> Asm string
  | "address" -> Address(Int64.of_string string)
  | "set" when string = "liveout" -> Liveout
  | "set" when string = "initro" -> InitRO
  | "str" | "attr" -> StrAttr string
  | "tid" -> ThreadId(int_of_string string)
  | _ -> err ("Unknown attribute @"^lab)

let typ_of_string = 
  let tre = Str.regexp "^u\\([0-9]+\\)$" in
  function
  | "bool" -> reg_1
  | "u8" -> reg_8
  | "u16" -> reg_16
  | "u32" -> reg_32
  | "u64" -> reg_64
  | s when Str.string_match tre s 0 ->
      Reg(int_of_string (Str.matched_group 1 s))
  | s -> err ("Unexpected type '"^s^"'")

let casttype_of_string = function
  | "pad"     -> CAST_UNSIGNED
  | "extend"  -> CAST_SIGNED  
  | "high"    -> CAST_HIGH    
  | "low"     -> CAST_LOW     
  | s -> err("Unexpected cast type '"^s^"'")


# 114 "grammar.ml"
let yytransl_const = [|
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* COMMA *);
  266 (* SEMI *);
    0 (* EOF *);
  267 (* COLON *);
  268 (* CJMP *);
  269 (* JMP *);
  270 (* LABEL *);
  271 (* ADDR *);
  272 (* ASSERT *);
  273 (* HALT *);
  274 (* SPECIAL *);
  275 (* LET *);
  276 (* IN *);
  277 (* UNKNOWN *);
  278 (* WITH *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* EBIG *);
  282 (* ELITTLE *);
  283 (* IF *);
  284 (* THEN *);
  285 (* ELSE *);
  286 (* PLUS *);
  287 (* MINUS *);
  288 (* DIVIDE *);
  289 (* MOD *);
  290 (* SMOD *);
  291 (* TIMES *);
  292 (* SDIVIDE *);
  293 (* LSHIFT *);
  294 (* RSHIFT *);
  295 (* ARSHIFT *);
  296 (* XOR *);
  297 (* NEQ *);
  298 (* SLT *);
  299 (* SLE *);
  300 (* AND *);
  301 (* OR *);
  302 (* CONCAT *);
  303 (* EXTRACT *);
  304 (* EQUAL *);
  305 (* EQUALEQUAL *);
  306 (* LT *);
  307 (* LE *);
  308 (* NOT *);
  309 (* ASSIGN *);
  310 (* GT *);
  311 (* GE *);
  312 (* SGT *);
  313 (* SGE *);
  314 (* AT *);
  315 (* QUESTION *);
  316 (* LCURLY *);
  317 (* RCURLY *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* INT *);
  259 (* STRING *);
  260 (* COMMENT *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\005\000\005\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\010\000\010\000\
\003\000\003\000\007\000\007\000\013\000\013\000\009\000\014\000\
\014\000\012\000\012\000\012\000\011\000\015\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\016\000\016\000\016\000\
\008\000\008\000\017\000\017\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\000\000\004\000\008\000\004\000\005\000\
\005\000\004\000\004\000\003\000\003\000\002\000\001\000\002\000\
\010\000\007\000\000\000\002\000\003\000\003\000\002\000\000\000\
\002\000\001\000\002\000\003\000\001\000\006\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\004\000\001\000\001\000\006\000\003\000\009\000\008\000\006\000\
\001\000\001\000\003\000\011\000\008\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\004\000\000\000\000\000\077\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\065\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\067\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\020\000\000\000\000\000\012\000\013\000\
\000\000\000\000\000\000\000\000\000\000\027\000\000\000\000\000\
\000\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\022\000\000\000\073\000\005\000\011\000\010\000\007\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\008\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\069\000\000\000\000\000\
\015\000\000\000\000\000\006\000\062\000\000\000\000\000\016\000\
\000\000\076\000\075\000\000\000\000\000\018\000\000\000\000\000\
\000\000\017\000"

let yydgoto = "\003\000\
\004\000\163\000\146\000\005\000\006\000\033\000\074\000\149\000\
\021\000\195\000\087\000\088\000\075\000\036\000\022\000\164\000\
\204\000"

let yysindex = "\007\000\
\000\000\004\007\000\000\000\000\016\000\123\004\006\255\007\255\
\000\000\004\007\018\255\020\255\000\000\000\000\004\007\004\007\
\010\255\014\255\004\007\122\008\000\000\004\255\000\000\015\255\
\227\254\004\007\004\007\029\255\030\255\004\007\004\007\034\255\
\000\000\213\254\033\255\000\000\033\255\170\255\025\255\039\255\
\027\007\045\255\046\255\038\255\045\255\004\007\049\255\004\007\
\004\007\004\007\004\007\004\007\004\007\004\007\004\007\004\007\
\004\007\004\007\004\007\004\007\004\007\004\007\004\007\004\007\
\004\007\004\007\004\007\004\007\004\007\004\007\004\007\033\255\
\040\255\000\000\227\254\066\007\163\006\227\254\227\254\163\006\
\163\006\227\254\004\007\004\007\000\000\056\255\026\255\088\255\
\000\000\000\000\033\255\033\255\004\007\004\007\083\255\105\007\
\004\007\013\255\013\255\045\255\045\255\045\255\045\255\045\255\
\221\255\221\255\221\255\238\008\048\009\210\255\210\255\015\009\
\200\008\048\009\210\255\210\255\210\255\210\255\210\255\210\255\
\122\008\000\000\012\255\000\000\004\007\090\255\000\000\000\000\
\090\255\090\255\090\255\163\006\163\006\000\000\056\255\004\007\
\048\255\000\000\144\007\183\007\100\255\126\255\222\007\252\254\
\000\000\000\000\005\008\000\000\000\000\000\000\000\000\000\000\
\090\255\090\255\000\000\203\006\004\007\004\007\096\255\093\255\
\000\000\000\000\122\008\099\255\126\255\106\255\108\255\004\007\
\000\000\000\000\000\000\122\008\122\008\004\007\104\255\101\255\
\105\255\107\255\109\255\163\006\044\008\004\007\033\255\103\255\
\068\255\002\255\090\255\000\000\083\008\000\000\033\255\117\255\
\000\000\118\255\114\255\000\000\000\000\214\254\115\255\000\000\
\033\255\000\000\000\000\004\007\002\255\000\000\161\008\121\255\
\056\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\126\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\132\000\000\000\000\000\000\000\215\254\
\002\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\175\000\000\000\000\000\233\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\005\000\000\164\005\002\006\002\006\164\005\
\164\005\164\005\000\000\000\000\000\000\000\000\001\000\117\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\093\002\151\002\047\001\105\001\163\001\221\001\023\002\
\209\002\011\003\069\003\238\005\079\005\127\003\185\003\182\005\
\040\006\126\005\243\003\045\004\103\004\161\004\219\004\021\005\
\100\006\000\000\000\000\000\000\000\000\151\006\000\000\000\000\
\151\006\151\006\151\006\164\005\164\005\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\151\006\151\006\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\116\255\133\006\000\000\000\000\000\000\
\000\000\000\000\000\000\164\005\000\000\000\000\000\000\000\000\
\000\000\000\000\151\006\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\006\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\009\000\224\255\
\128\000\186\255\172\255\219\255\000\000\000\000\000\000\229\255\
\000\000"

let yytablesize = 2665
let yytable = "\089\000\
\026\000\134\000\166\000\193\000\083\000\202\000\024\000\001\000\
\002\000\084\000\203\000\024\000\144\000\020\000\145\000\023\000\
\035\000\037\000\039\000\046\000\043\000\038\000\040\000\071\000\
\044\000\072\000\041\000\042\000\073\000\078\000\045\000\079\000\
\194\000\085\000\122\000\091\000\082\000\076\000\077\000\095\000\
\123\000\080\000\081\000\167\000\050\000\051\000\052\000\053\000\
\054\000\092\000\155\000\046\000\094\000\137\000\138\000\097\000\
\085\000\096\000\024\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\124\000\135\000\126\000\127\000\128\000\
\129\000\130\000\131\000\086\000\136\000\141\000\132\000\133\000\
\150\000\151\000\152\000\148\000\157\000\160\000\174\000\175\000\
\139\000\140\000\176\000\178\000\143\000\179\000\182\000\183\000\
\184\000\191\000\185\000\192\000\025\000\186\000\199\000\200\000\
\169\000\170\000\201\000\205\000\210\000\002\000\007\000\008\000\
\009\000\209\000\010\000\078\000\072\000\034\000\208\000\030\000\
\147\000\177\000\000\000\000\000\153\000\154\000\000\000\000\000\
\011\000\190\000\012\000\156\000\013\000\014\000\161\000\162\000\
\015\000\198\000\196\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\206\000\000\000\000\000\000\000\000\000\
\172\000\173\000\000\000\017\000\018\000\000\000\056\000\090\000\
\046\000\019\000\000\000\180\000\000\000\000\000\000\000\000\000\
\000\000\181\000\000\000\000\000\187\000\000\000\000\000\047\000\
\000\000\189\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\207\000\
\046\000\000\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\046\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\000\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\026\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\026\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\035\000\000\000\
\026\000\026\000\026\000\026\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\024\000\000\000\000\000\024\000\000\000\
\024\000\024\000\024\000\024\000\024\000\000\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\000\000\024\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\037\000\000\000\000\000\024\000\024\000\024\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\025\000\000\000\000\000\
\025\000\000\000\025\000\025\000\025\000\025\000\025\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\038\000\000\000\000\000\025\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\056\000\
\000\000\000\000\056\000\000\000\056\000\000\000\056\000\056\000\
\056\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\056\000\000\000\056\000\000\000\000\000\000\000\
\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\034\000\000\000\000\000\056\000\
\056\000\056\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\055\000\000\000\000\000\055\000\000\000\055\000\000\000\
\055\000\055\000\055\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\000\000\055\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\036\000\000\000\
\000\000\055\000\055\000\055\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\000\000\000\000\035\000\000\000\035\000\000\000\035\000\035\000\
\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\035\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\032\000\000\000\000\000\035\000\
\035\000\035\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\037\000\000\000\000\000\037\000\000\000\037\000\000\000\
\037\000\037\000\037\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\037\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\033\000\000\000\
\000\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\037\000\037\000\037\000\038\000\000\000\000\000\038\000\000\000\
\038\000\000\000\038\000\038\000\038\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\039\000\000\000\000\000\038\000\038\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\034\000\000\000\000\000\
\034\000\000\000\034\000\000\000\034\000\034\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\000\000\
\034\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\040\000\000\000\000\000\034\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\036\000\
\000\000\000\000\036\000\000\000\036\000\000\000\036\000\036\000\
\036\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\000\000\036\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\041\000\000\000\000\000\036\000\
\036\000\036\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\032\000\000\000\032\000\000\000\032\000\032\000\032\000\000\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
\032\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\032\000\032\000\032\000\032\000\000\000\000\000\049\000\000\000\
\000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\032\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\033\000\
\000\000\000\000\033\000\000\000\033\000\000\000\033\000\033\000\
\033\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\033\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\033\000\033\000\033\000\033\000\000\000\000\000\
\050\000\000\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\000\000\000\000\033\000\
\033\000\033\000\000\000\000\000\033\000\033\000\033\000\033\000\
\033\000\039\000\000\000\000\000\039\000\000\000\039\000\000\000\
\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\039\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\000\000\000\000\
\000\000\000\000\047\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
\000\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\040\000\000\000\000\000\040\000\000\000\
\040\000\000\000\040\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\040\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\000\000\000\000\040\000\040\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\041\000\000\000\000\000\
\041\000\000\000\041\000\000\000\041\000\041\000\041\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\041\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\041\000\041\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\041\000\041\000\041\000\
\000\000\000\000\041\000\041\000\041\000\041\000\041\000\049\000\
\000\000\000\000\049\000\000\000\049\000\000\000\049\000\049\000\
\049\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\049\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\049\000\049\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\050\000\000\000\000\000\050\000\000\000\050\000\000\000\
\050\000\050\000\050\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\050\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\050\000\000\000\000\000\
\000\000\050\000\050\000\050\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\047\000\000\000\000\000\047\000\000\000\
\047\000\000\000\047\000\047\000\047\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\
\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\000\000\047\000\047\000\047\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\048\000\000\000\000\000\
\048\000\000\000\048\000\000\000\048\000\048\000\048\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\048\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\048\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\051\000\
\000\000\000\000\051\000\000\000\051\000\000\000\051\000\051\000\
\051\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\051\000\024\000\051\000\045\000\025\000\000\000\
\000\000\000\000\051\000\051\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\000\000\051\000\
\051\000\051\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\052\000\000\000\019\000\052\000\000\000\052\000\000\000\
\052\000\052\000\052\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\052\000\042\000\052\000\000\000\
\000\000\000\000\000\000\000\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\052\000\052\000\052\000\000\000\000\000\052\000\052\000\
\052\000\052\000\052\000\053\000\000\000\000\000\053\000\000\000\
\053\000\000\000\053\000\053\000\053\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\044\000\053\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\053\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\000\000\000\000\053\000\053\000\053\000\000\000\000\000\
\053\000\053\000\053\000\053\000\053\000\054\000\000\000\000\000\
\054\000\000\000\054\000\000\000\054\000\054\000\054\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\043\000\
\054\000\000\000\054\000\000\000\000\000\000\000\000\000\000\000\
\054\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\000\000\054\000\054\000\054\000\
\000\000\068\000\054\000\054\000\054\000\054\000\054\000\046\000\
\000\000\000\000\046\000\000\000\046\000\000\000\046\000\046\000\
\046\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\046\000\061\000\046\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\
\000\000\000\000\046\000\046\000\000\000\000\000\045\000\046\000\
\000\000\045\000\000\000\045\000\060\000\045\000\045\000\045\000\
\046\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\000\000\045\000\000\000\045\000\000\000\000\000\074\000\000\000\
\000\000\045\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\045\000\045\000\019\000\
\000\000\045\000\045\000\000\000\000\000\019\000\045\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\042\000\045\000\
\000\000\042\000\000\000\042\000\000\000\042\000\042\000\042\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\042\000\
\000\000\044\000\000\000\044\000\000\000\044\000\044\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\044\000\019\000\044\000\000\000\019\000\000\000\000\000\
\000\000\044\000\044\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\044\000\000\000\000\000\
\000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\043\000\000\000\000\000\043\000\000\000\043\000\000\000\043\000\
\043\000\043\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\043\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\
\000\000\000\000\068\000\000\000\000\000\068\000\000\000\068\000\
\000\000\068\000\068\000\068\000\043\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\000\000\068\000\000\000\068\000\
\000\000\043\000\000\000\000\000\061\000\068\000\068\000\061\000\
\000\000\061\000\000\000\061\000\061\000\061\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\061\000\000\000\000\000\068\000\000\000\060\000\000\000\000\000\
\060\000\000\000\060\000\000\000\060\000\060\000\060\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\074\000\
\060\000\000\000\074\000\000\000\000\000\061\000\000\000\000\000\
\060\000\060\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\171\000\046\000\000\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\073\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\000\000\000\000\000\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\007\000\008\000\009\000\000\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\012\000\000\000\013\000\014\000\000\000\000\000\015\000\000\000\
\000\000\046\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\017\000\018\000\000\000\000\000\000\000\093\000\019\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\046\000\000\000\125\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\046\000\
\000\000\142\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\046\000\000\000\
\000\000\064\000\065\000\066\000\000\000\000\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\046\000\159\000\000\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\000\000\000\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\046\000\000\000\165\000\064\000\
\065\000\066\000\000\000\000\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\046\000\000\000\168\000\064\000\065\000\
\066\000\000\000\000\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\046\000\188\000\000\000\064\000\065\000\066\000\
\000\000\000\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\046\000\197\000\000\000\064\000\065\000\066\000\000\000\
\000\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\046\000\000\000\000\000\064\000\065\000\066\000\000\000\000\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\046\000\
\000\000\000\000\064\000\065\000\066\000\000\000\000\000\067\000\
\068\000\069\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\046\000\000\000\
\000\000\064\000\065\000\066\000\000\000\000\000\067\000\068\000\
\069\000\070\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\046\000\000\000\000\000\000\000\
\064\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\046\000\059\000\060\000\
\061\000\062\000\000\000\000\000\000\000\000\000\064\000\065\000\
\066\000\000\000\000\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\046\000\059\000\
\060\000\061\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\000\000\000\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\000\000\060\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\000\000\000\000\067\000\068\000\069\000\
\070\000"

let yycheck = "\037\000\
\000\000\086\000\007\001\002\001\048\001\048\001\048\001\001\000\
\002\000\053\001\053\001\053\001\001\001\002\000\003\001\000\000\
\011\001\011\001\001\001\007\001\011\001\010\000\003\001\020\001\
\011\001\011\001\015\000\016\000\058\001\001\001\019\000\002\001\
\031\001\001\001\072\000\011\001\003\001\026\000\027\000\002\001\
\001\001\030\000\031\000\048\001\032\001\033\001\034\001\035\001\
\036\001\011\001\135\000\007\001\007\001\091\000\092\000\007\001\
\001\001\046\000\000\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\075\000\059\001\077\000\078\000\079\000\
\080\000\081\000\082\000\059\001\005\001\011\001\083\000\084\000\
\129\000\130\000\131\000\010\001\053\001\002\001\007\001\011\001\
\093\000\094\000\008\001\002\001\097\000\002\001\007\001\011\001\
\008\001\011\001\008\001\048\001\000\000\009\001\002\001\002\001\
\153\000\154\000\009\001\009\001\209\000\000\000\001\001\002\001\
\003\001\009\001\005\001\000\000\008\001\006\000\205\000\020\001\
\125\000\165\000\255\255\255\255\132\000\133\000\255\255\255\255\
\019\001\183\000\021\001\136\000\023\001\024\001\025\001\026\001\
\027\001\191\000\187\000\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\201\000\255\255\255\255\255\255\255\255\
\157\000\158\000\255\255\046\001\047\001\255\255\000\000\006\001\
\007\001\052\001\255\255\168\000\255\255\255\255\255\255\255\255\
\255\255\174\000\255\255\255\255\180\000\255\255\255\255\022\001\
\255\255\182\000\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\204\000\
\007\001\255\255\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\056\001\057\001\007\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\001\001\255\255\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\000\000\255\255\
\048\001\049\001\050\001\051\001\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\001\001\255\255\255\255\004\001\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\000\000\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\001\001\255\255\255\255\
\004\001\255\255\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\000\000\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\000\000\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\000\000\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\000\000\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\000\000\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\000\000\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\000\000\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\000\000\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\030\001\031\001\255\255\255\255\000\000\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\255\255\
\000\000\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\001\001\255\255\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\001\001\022\001\000\000\004\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\058\001\001\001\255\255\000\000\004\001\255\255\006\001\255\255\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\020\001\000\000\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\058\001\001\001\255\255\255\255\004\001\255\255\
\006\001\255\255\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\020\001\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\000\000\
\020\001\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\255\255\255\255\255\255\049\001\050\001\051\001\
\255\255\000\000\054\001\055\001\056\001\057\001\058\001\001\001\
\255\255\255\255\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\020\001\000\000\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\255\255\255\255\044\001\045\001\255\255\255\255\001\001\049\001\
\255\255\004\001\255\255\006\001\000\000\008\001\009\001\010\001\
\058\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\255\255\022\001\255\255\255\255\000\000\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\040\001\041\001\004\001\
\255\255\044\001\045\001\255\255\255\255\010\001\049\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\001\001\058\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\255\255\
\255\255\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\058\001\
\255\255\004\001\255\255\006\001\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\020\001\001\001\022\001\255\255\004\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\040\001\255\255\255\255\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\001\001\255\255\255\255\004\001\255\255\006\001\255\255\008\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\020\001\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\004\001\255\255\006\001\
\255\255\008\001\009\001\010\001\045\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\020\001\255\255\022\001\
\255\255\058\001\255\255\255\255\001\001\028\001\029\001\004\001\
\255\255\006\001\255\255\008\001\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\058\001\255\255\001\001\255\255\255\255\
\004\001\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\001\001\
\020\001\255\255\004\001\255\255\255\255\058\001\255\255\255\255\
\028\001\029\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\058\001\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\006\001\007\001\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\058\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\001\001\002\001\003\001\255\255\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\021\001\255\255\023\001\024\001\255\255\255\255\027\001\255\255\
\255\255\007\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\046\001\047\001\255\255\255\255\255\255\028\001\052\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\007\001\255\255\009\001\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\007\001\
\255\255\009\001\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\007\001\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\007\001\008\001\255\255\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\007\001\255\255\009\001\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\255\255\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\007\001\255\255\009\001\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\007\001\008\001\255\255\049\001\050\001\051\001\
\255\255\255\255\054\001\055\001\056\001\057\001\255\255\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\007\001\008\001\255\255\049\001\050\001\051\001\255\255\
\255\255\054\001\055\001\056\001\057\001\255\255\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\007\001\255\255\255\255\049\001\050\001\051\001\255\255\255\255\
\054\001\055\001\056\001\057\001\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\007\001\
\255\255\255\255\049\001\050\001\051\001\255\255\255\255\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\007\001\255\255\
\255\255\049\001\050\001\051\001\255\255\255\255\054\001\055\001\
\056\001\057\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\007\001\255\255\255\255\255\255\
\049\001\050\001\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\007\001\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\049\001\050\001\
\051\001\255\255\255\255\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\007\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\051\001\255\255\255\255\054\001\055\001\056\001\057\001\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\255\255\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\051\001\255\255\255\255\054\001\055\001\056\001\
\057\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  SEMI\000\
  EOF\000\
  COLON\000\
  CJMP\000\
  JMP\000\
  LABEL\000\
  ADDR\000\
  ASSERT\000\
  HALT\000\
  SPECIAL\000\
  LET\000\
  IN\000\
  UNKNOWN\000\
  WITH\000\
  TRUE\000\
  FALSE\000\
  EBIG\000\
  ELITTLE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  MOD\000\
  SMOD\000\
  TIMES\000\
  SDIVIDE\000\
  LSHIFT\000\
  RSHIFT\000\
  ARSHIFT\000\
  XOR\000\
  NEQ\000\
  SLT\000\
  SLE\000\
  AND\000\
  OR\000\
  CONCAT\000\
  EXTRACT\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LT\000\
  LE\000\
  NOT\000\
  ASSIGN\000\
  GT\000\
  GE\000\
  SGT\000\
  SGE\000\
  AT\000\
  QUESTION\000\
  LCURLY\000\
  RCURLY\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  STRING\000\
  COMMENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmtlist) in
    Obj.repr(
# 94 "grammar.mly"
               ( _1 )
# 1052 "grammar.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revstmtlist) in
    Obj.repr(
# 97 "grammar.mly"
               ( List.rev _1 )
# 1059 "grammar.ml"
               : 'stmtlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revstmtlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 108 "grammar.mly"
                    (  _2 :: _1 )
# 1067 "grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "grammar.mly"
  ( [] )
# 1073 "grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 112 "grammar.mly"
                      ( Jmp(_2, _3) )
# 1082 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 113 "grammar.mly"
                                             ( CJmp(_2, _4, _6, _7)  )
# 1093 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 114 "grammar.mly"
                            ( Special(_2, _3))
# 1102 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 115 "grammar.mly"
                              ( Move(_1, _3, _4) )
# 1112 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 116 "grammar.mly"
                             ( Move(_1, _3, _4) )
# 1122 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 117 "grammar.mly"
                       ( Halt(_2, _3) )
# 1131 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'semi) in
    Obj.repr(
# 118 "grammar.mly"
                         ( Assert(_2, _3) )
# 1140 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 119 "grammar.mly"
                 ( Label(Name _2, _3) )
# 1148 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Big_int.big_int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 120 "grammar.mly"
                 ( Label(Addr (int64_of_big_int _2), _3) )
# 1156 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 121 "grammar.mly"
                ( Comment(_1, _2) )
# 1164 "grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Big_int.big_int) in
    Obj.repr(
# 125 "grammar.mly"
      ( _1 )
# 1171 "grammar.ml"
               : 'plusminusint))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Big_int.big_int) in
    Obj.repr(
# 126 "grammar.mly"
            ( minus_big_int _2 )
# 1178 "grammar.ml"
               : 'plusminusint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : Big_int.big_int) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Big_int.big_int) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'plusminusint) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 129 "grammar.mly"
                                                                 ( {name=_1; mem=true; t=_10; index=int64_of_big_int _3; value=_6; usage=RD; (* XXX fix me *) taint=Taint(int_of_big_int _8)} )
# 1189 "grammar.ml"
               : Type.context))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Big_int.big_int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'plusminusint) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 130 "grammar.mly"
                                            ( {name=_1; mem=false; t=_7; index=0L; value=_3; usage=RD; (* XXX fix me *) taint=Taint(int_of_big_int _5)} )
# 1199 "grammar.ml"
               : Type.context))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "grammar.mly"
     ( [] )
# 1205 "grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 134 "grammar.mly"
             ( _1 :: _2 )
# 1213 "grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 137 "grammar.mly"
               ( mk_attr _2 _3 )
# 1221 "grammar.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Type.context) in
    Obj.repr(
# 138 "grammar.mly"
                ( Context(_3) )
# 1229 "grammar.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opttyp) in
    Obj.repr(
# 141 "grammar.mly"
            ( 
    Scope.get_lval _1 _2
  )
# 1239 "grammar.ml"
               : 'lval))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "grammar.mly"
  ( None )
# 1245 "grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 147 "grammar.mly"
            ( Some(_2) )
# 1252 "grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 150 "grammar.mly"
       (_1)
# 1259 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 151 "grammar.mly"
                ( TMem _2 )
# 1266 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'styp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'styp) in
    Obj.repr(
# 152 "grammar.mly"
                     ( Array(_3, _1) )
# 1274 "grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "grammar.mly"
     ( typ_of_string _1 )
# 1281 "grammar.ml"
               : 'styp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 160 "grammar.mly"
                               ( (Scope.add_push _2 _4, _6) )
# 1290 "grammar.ml"
               : 'letstart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 163 "grammar.mly"
                     ( _2 )
# 1297 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 164 "grammar.mly"
                     ( BinOp(PLUS, _1, _3) )
# 1305 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 165 "grammar.mly"
                     ( BinOp(MINUS, _1, _3))
# 1313 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 166 "grammar.mly"
                     ( BinOp(TIMES, _1, _3) )
# 1321 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 167 "grammar.mly"
                     ( BinOp(DIVIDE, _1, _3) )
# 1329 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 168 "grammar.mly"
                     ( BinOp(SDIVIDE, _1, _3) )
# 1337 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 169 "grammar.mly"
                     ( BinOp(MOD, _1, _3) )
# 1345 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 170 "grammar.mly"
                     ( BinOp(SMOD, _1, _3) )
# 1353 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 171 "grammar.mly"
                     ( BinOp(LSHIFT, _1, _3) )
# 1361 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 172 "grammar.mly"
                     ( BinOp(RSHIFT, _1, _3) )
# 1369 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 173 "grammar.mly"
                     ( BinOp(ARSHIFT, _1, _3) )
# 1377 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 174 "grammar.mly"
                     ( BinOp(AND, _1, _3) )
# 1385 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 175 "grammar.mly"
                     ( BinOp(OR, _1, _3) )
# 1393 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 176 "grammar.mly"
                     ( BinOp(XOR,  _1, _3) )
# 1401 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 177 "grammar.mly"
                          ( BinOp(EQ, _1, _3) )
# 1409 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 179 "grammar.mly"
                     ( BinOp(NEQ, _1, _3) )
# 1417 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 180 "grammar.mly"
                     ( BinOp(LT, _1, _3) )
# 1425 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 181 "grammar.mly"
                     ( BinOp(LE,  _1, _3) )
# 1433 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 182 "grammar.mly"
                     ( BinOp(SLT, _1, _3) )
# 1441 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 183 "grammar.mly"
                     ( BinOp(SLE, _1, _3) )
# 1449 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 185 "grammar.mly"
                     ( BinOp(LT,  _3, _1) )
# 1457 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 186 "grammar.mly"
                     ( BinOp(LE,  _3, _1) )
# 1465 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 187 "grammar.mly"
                     ( BinOp(SLT, _3, _1) )
# 1473 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 188 "grammar.mly"
                     ( BinOp(SLE, _3, _1) )
# 1481 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 189 "grammar.mly"
                     ( UnOp(NOT, _2) )
# 1488 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 190 "grammar.mly"
                           ( UnOp(NEG, _2) )
# 1495 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 191 "grammar.mly"
                           ( Unknown(_2, _4) )
# 1503 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 192 "grammar.mly"
                     ( Lab(_1) )
# 1510 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lval) in
    Obj.repr(
# 193 "grammar.mly"
                     ( Var(_1) )
# 1517 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 195 "grammar.mly"
      ( Ite(_2, _4, _6) )
# 1526 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'letstart) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 196 "grammar.mly"
                     ( Scope.pop();
		       let (x,y) = _1 in
		       Let(x,y, _3) )
# 1536 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Big_int.big_int) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Big_int.big_int) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 199 "grammar.mly"
                                                         ( Extract(_3, _5, _8) )
# 1545 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 200 "grammar.mly"
                                                         ( Concat(_4, _7) )
# 1553 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp ) in
    Obj.repr(
# 202 "grammar.mly"
    ( Cast(casttype_of_string _1, _3, _5) )
# 1562 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "grammar.mly"
                     ( exp_true )
# 1568 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "grammar.mly"
                     ( exp_false )
# 1574 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Big_int.big_int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 205 "grammar.mly"
                     ( Int(_1, _3) )
# 1582 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Ast.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Ast.exp ) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'endian) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'assign) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 207 "grammar.mly"
      ( Store(_1, _4, _11, _6, _9) )
# 1594 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Ast.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Ast.exp ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'endian) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 208 "grammar.mly"
                                                   ( Load(_1, _3, _5, _8) )
# 1604 "grammar.ml"
               : Ast.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "grammar.mly"
        ( exp_true )
# 1610 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "grammar.mly"
          ( exp_false )
# 1616 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp ) in
    Obj.repr(
# 213 "grammar.mly"
       ( _1 )
# 1623 "grammar.ml"
               : 'endian))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "grammar.mly"
       ( () )
# 1629 "grammar.ml"
               : 'semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "grammar.mly"
  ( () )
# 1635 "grammar.ml"
               : 'semi))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "grammar.mly"
         (())
# 1641 "grammar.ml"
               : 'assign))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "grammar.mly"
        (())
# 1647 "grammar.ml"
               : 'assign))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ast.exp )
;;
